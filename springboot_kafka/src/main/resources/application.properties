spring.application.name=springboot_kafka

# Kafka config
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.topic.name=userTopic
spring.kafka.topic.dlt-name=userTopic.DLT

# consumer config
spring.kafka.consumer.group-id=testGroup
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.spl.hm.springboot_kafka.dto

# producer config
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Retry configuration
spring.kafka.producer.max-retries=3

## Recommended production configs
## in bytes (16KB default, increase if throughput is needed)
#spring.kafka.producer.batch-size=16384
## in bytes (32MB)
#spring.kafka.producer.buffer-memory=33554432
## options: none, gzip, snappy, lz4, zstd
#spring.kafka.producer.compression-type=gzip
## delay to increase batching; good for throughput
#spring.kafka.producer.linger-ms=5
## total time to attempt message delivery
#spring.kafka.producer.delivery-timeout-ms=120000
#spring.kafka.producer.request-timeout-ms=30000
#
##For Reliability & Safety
##Use these when message loss is unacceptable (e.g., financial systems).
## guarantees exactly-once delivery
#spring.kafka.producer.enable-idempotence=true
## <=5 is safe with idempotence
#spring.kafka.producer.max-in-flight-requests-per-connection=5

#For Monitoring and Logging:
#spring.kafka.producer.properties.interceptor.classes: com.monitoring.clients.interceptor.MonitoringProducerInterceptor

# config for partitioner
#spring.kafka.producer.partitioner-class=com.example.kafka.RoundRobinPartitioner

